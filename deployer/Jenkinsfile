#!/usr/bin/env groovy
pipeline {
    parameters {
        choice(
            name: 'STAGE',
            choices: ['dev', 'preprod', 'prod'],
            description: 'The environment name'
        )
        choice(
            name: 'FUNCTION_NAME',
            choices: ['my-math-function','my-math-function2'],
            description: 'Lambda function name'
        )
        choice(
            name: 'BRANCH_NAME',
            choices: ['prod','main'],
            description: 'Branch name for deployment'
        )
        choice(
            name: 'SERVICE_DIRECTORY',
            choices: ['service1','service2'],
            description: 'SERVICE_DIRECTORY name for lambda package'
        )
    }

    environment {        
        AWS_ACCESS_KEY_ID = credentials("aws-access-key")
        AWS_SECRET_ACCESS_KEY = credentials("aws-secret-key")
        AWS_DEFAULT_REGION = "us-east-1"
    }



    options {
        buildDiscarder(logRotator(numToKeepStr: '3'))
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
					$class: 'GitSCM',
					branches: [
						[name: params.BRANCH_NAME]
					]
					userRemoteConfigs: [
						[
							credentialsId: 'bcloud_jenkins_user',
							url: 'https://github.com/satyashilD/multi_folder_jenkins.git'
						]
					]
                ])
            }
        }
		
		stage('CD to service lambda directory') {
			steps {
			    dir("${params.SERVICE_DIRECTORY}") {
    				sh '''
						#!/bin/bash
                        set -eux pipefail
    				    zip ${params.SERVICE_DIRECTORY}-deployment-package.zip lambda_function.py
    				'''
		    	}
			}
		}
		
		stage('Upload build artifact on S3') {
			steps {
             
			    dir("${params.SERVICE_DIRECTORY}") {
                       withCredentials([usernamePassword([[$class: 'AmazonWebServicesCredentialsBinding',accessKeyVariable: 'AWS_ACCESS_KEY_ID',credentialsId: 'aws-creds-draas-dev',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                           sh '''
						         #!/bin/bash
                                 set -eux pipefail
    				             aws s3 cp ${params.SERVICE_DIRECTORY}-deployment-package.zip 3://beyondcloud-artifacts/
    				          '''
                    }
    				
		    	}
			}
		}

        stage('Deploy lambda function with latest code') {
			steps {
			    dir("${params.SERVICE_DIRECTORY}") {
                        withCredentials([usernamePassword([[$class: 'AmazonWebServicesCredentialsBinding',accessKeyVariable: 'AWS_ACCESS_KEY_ID',credentialsId: 'aws-creds-draas-dev',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh '''
						    #!/bin/bash
                            set -eux pipefail
    				        aws lambda update-function-code --function-name ${FUNCTION_NAME} --zip-file fileb://${params.SERVICE_DIRECTORY}-deployment-package.zip
    				       '''
                        }
		    	}
			}
		}
		
    post {
        always {
            sh 'rm -rf *'
        }
    }
}

